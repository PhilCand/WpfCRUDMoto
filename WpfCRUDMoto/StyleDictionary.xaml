<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WpfCRUDMoto">

    <Style TargetType="Button" x:Key="InactiveButtonMotard">

        <Setter Property="Background" Value="#FFBF946E" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="15" Background="#FFBF946E" BorderBrush="#ccc" BorderThickness="0,0,0,0" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>       
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">                
                <Setter Property="Foreground" Value="Silver"/>

            </Trigger>
            <DataTrigger 
                Binding ="{Binding ElementName=listePersonne, Path=SelectedIndex}" 
                Value="-1">
                <Setter Property="Button.IsEnabled" Value="false"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="InactiveButtonMoto">
        <Setter Property="Background" Value="#FFBF946E" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="15" Background="#FFBF946E" BorderBrush="#ccc" BorderThickness="0,0,0,0" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Silver"/>
            </Trigger>
            <DataTrigger 
                Binding ="{Binding ElementName=listeMoto, Path=SelectedIndex}" 
                Value="-1">
                <Setter Property="Button.IsEnabled" Value="false"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="InactiveButtonUpdateMotard">
        <Setter Property="Background" Value="#FFBF946E" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="15" Background="#FFBF946E" BorderBrush="#ccc" BorderThickness="0,0,0,0" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Silver"/>
            </Trigger>
            <DataTrigger Binding ="{Binding Text.Length, ElementName=txtbUpdatePersonName, UpdateSourceTrigger=PropertyChanged}" Value="0">
                <Setter Property="Button.IsEnabled" Value="false"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="InactiveButtonCreerMotard">
        <Setter Property="Background" Value="#FFBF946E" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="15" Background="#FFBF946E" BorderBrush="#ccc" BorderThickness="0,0,0,0" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Silver"/>
            </Trigger>
            <DataTrigger Binding ="{Binding Text.Length, ElementName=txtbNewPersonName, UpdateSourceTrigger=PropertyChanged}" Value="0">
                <Setter Property="Button.IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="InactiveButtonCotisation">
        <Setter Property="Background" Value="#FFBF946E" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="15" Background="#FFBF946E" BorderBrush="#ccc" BorderThickness="0,0,0,0" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Silver"/>
            </Trigger>
            <DataTrigger 
                Binding ="{Binding ElementName=listeCotisations, Path=SelectedIndex}" 
                Value="-1">
                <Setter Property="Button.IsEnabled" Value="false"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="ActiveButton">
        <Setter Property="Background" Value="#FFBF946E" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="15" Background="#FFBF946E" BorderThickness="0" >
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="5"/>
                <Setter Property="BorderBrush" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <SolidColorBrush x:Key="BGblack" Color="#FF191E22"/>
    <SolidColorBrush x:Key="TextBlanc" Color="#FFFFF5F5"/>
    <LinearGradientBrush x:Key="BGListBox" EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
        <GradientStop Color="#FF706363" Offset="1"/>
        <GradientStop Color="White"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="BGBtn" Color="#FFBF946E"/>
</ResourceDictionary>

